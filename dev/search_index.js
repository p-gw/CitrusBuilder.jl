var documenterSearchIndex = {"docs":
[{"location":"tutorials/multi_language/#Constructing-multi-language-surveys","page":"Construct multi-language surveys","title":"Constructing multi-language surveys","text":"","category":"section"},{"location":"tutorials/multi_language/","page":"Construct multi-language surveys","title":"Construct multi-language surveys","text":"In some cases constructing basic surveys is insufficient and one is required to build multi-language surveys. Multi-language surveys can be created in CitrusBuilder.","category":"page"},{"location":"tutorials/multi_language/","page":"Construct multi-language surveys","title":"Construct multi-language surveys","text":"As an example consider a continuation of the Constructing basic surveys tutorial where we built a survey for a statistics 101 course. In this survey we asked for ","category":"page"},{"location":"tutorials/multi_language/","page":"Construct multi-language surveys","title":"Construct multi-language surveys","text":"the gender, \nthe age, and \nthe height","category":"page"},{"location":"tutorials/multi_language/","page":"Construct multi-language surveys","title":"Construct multi-language surveys","text":"of the survey participants.","category":"page"},{"location":"tutorials/multi_language/","page":"Construct multi-language surveys","title":"Construct multi-language surveys","text":"In the following example our statistics 101 course is split into two groups: In the first group the course is held in German while in the second group the course is held in English. We still want to analyse the participants data together, so we create a single multi-language survey.","category":"page"},{"location":"tutorials/multi_language/","page":"Construct multi-language surveys","title":"Construct multi-language surveys","text":"First, since the majority of our participants will be German-speaking we set the default language to German. ","category":"page"},{"location":"tutorials/multi_language/","page":"Construct multi-language surveys","title":"Construct multi-language surveys","text":"using CitrusBuilder \n\nset_default_language!(\"de\")","category":"page"},{"location":"tutorials/multi_language/","page":"Construct multi-language surveys","title":"Construct multi-language surveys","text":"Then we can begin the survey construction following the previous tutorial.  The difference is that instead of constructing our survey components using an id and a title, we now have to define titles for each language specifically.  We can do this by providing language_settings instead of a simple title.","category":"page"},{"location":"tutorials/multi_language/","page":"Construct multi-language surveys","title":"Construct multi-language surveys","text":"In addition to the three questions we also include a language_switch in the beginning of our survey. Our statistics survey constructor then looks like this: ","category":"page"},{"location":"tutorials/multi_language/","page":"Construct multi-language surveys","title":"Construct multi-language surveys","text":"my_statistics_survey = survey(100000, language_settings([\n    language_setting(\"de\", \"Statistik 101 Fragebogen\"),\n    language_setting(\"en\", \"Statistics 101 survey\")\n])) do\n    question_group(1, \"\") do\n        language_switch(\"language\", language_settings([\n            language_setting(\"de\", \"Bitte wähle eine Sprache aus.\"),\n            language_setting(\"en\", \"Please select a language.\")\n        ])),\n        gender_select(\"gender\", language_settings([\n            language_setting(\"de\", \"Bitte wähle dein Geschlecht aus.\"),\n            language_setting(\"en\", \"Please select your gender.\")\n        ])),\n        numerical_input(\"age\", language_settings([\n            language_setting(\"de\", \"Bitte gib dein Alter in Jahren an.\"),\n            language_setting(\"en\", \"Please state your age in years.\")\n        ]), minimum=18, integer_only=true),\n        numerical_input(\"height\", language_settings([\n            language_setting(\"de\", \"Bitte gib deine Größe in Zentimeter an.\"),\n            language_setting(\"en\", \"Please state your height in centimeters.\")\n        ]), minimum=0, maximum=250, integer_only=true)\n    end\nend","category":"page"},{"location":"tutorials/multi_language/","page":"Construct multi-language surveys","title":"Construct multi-language surveys","text":"Since we have to provide the localization for all survey languages, each component must contain at least a title for all languages. ","category":"page"},{"location":"tutorials/multi_language/","page":"Construct multi-language surveys","title":"Construct multi-language surveys","text":"The completed survey can be exported to an .lss file using write.","category":"page"},{"location":"tutorials/multi_language/","page":"Construct multi-language surveys","title":"Construct multi-language surveys","text":"write(\"statistics_101_multi_language.lss\", my_statistics_survey)","category":"page"},{"location":"tutorials/multi_language/#Alternative-approach","page":"Construct multi-language surveys","title":"Alternative approach","text":"","category":"section"},{"location":"tutorials/multi_language/","page":"Construct multi-language surveys","title":"Construct multi-language surveys","text":"Just like in the basic surveys tutorial we can make use of the alternative approach to survey construction. In this case we just have to substitute the single-language survey components with their multi-language equivalents. ","category":"page"},{"location":"tutorials/multi_language/","page":"Construct multi-language surveys","title":"Construct multi-language surveys","text":"using CitrusBuilder \n\nmy_statistics_survey = survey(100000, language_settings([\n    language_setting(\"de\", \"Statistik 101 Fragebogen\"),\n    language_setting(\"en\", \"Statistics 101 survey\")\n]))","category":"page"},{"location":"tutorials/multi_language/","page":"Construct multi-language surveys","title":"Construct multi-language surveys","text":"After creating the survey, we can add the required question group","category":"page"},{"location":"tutorials/multi_language/","page":"Construct multi-language surveys","title":"Construct multi-language surveys","text":"g1 = question_group(1, \"\")\nappend!(my_statistics_survey, g1)\n\nmy_statistics_survey","category":"page"},{"location":"tutorials/multi_language/","page":"Construct multi-language surveys","title":"Construct multi-language surveys","text":"Finally, the questions can be appended one by one.","category":"page"},{"location":"tutorials/multi_language/","page":"Construct multi-language surveys","title":"Construct multi-language surveys","text":"append!(g1, language_switch(\"language\", language_settings([\n    language_setting(\"de\", \"Bitte wähle eine Sprache aus.\"),\n    language_setting(\"en\", \"Please select a language.\")\n])))\n\nappend!(g1, gender_select(\"gender\", language_settings([\n    language_setting(\"de\", \"Bitte wähle dein Geschlecht aus.\"),\n    language_setting(\"en\", \"Please select your gender.\")\n])))\n        \nappend!(g1, numerical_input(\"age\", language_settings([\n    language_setting(\"de\", \"Bitte gib dein Alter in Jahren an.\"),\n    language_setting(\"en\", \"Please state your age in years.\")\n]), minimum=18, integer_only=true))\n\nappend!(g1, numerical_input(\"height\", language_settings([\n    language_setting(\"de\", \"Bitte gib deine Größe in Zentimeter an.\"),\n    language_setting(\"en\", \"Please state your height in centimeters.\")\n]), minimum=0, maximum=250, integer_only=true))\n\nmy_statistics_survey","category":"page"},{"location":"tutorials/multi_language/","page":"Construct multi-language surveys","title":"Construct multi-language surveys","text":"This approach will yield an identical survey.  Again, to save the completed survey simply use write.","category":"page"},{"location":"tutorials/multi_language/","page":"Construct multi-language surveys","title":"Construct multi-language surveys","text":"write(\"statistics_101_multi_language.lss\", my_statistics_survey)","category":"page"},{"location":"tutorials/from_data/#Constructing-surveys-programmatically","page":"Construct surveys programmatically","title":"Constructing surveys programmatically","text":"","category":"section"},{"location":"tutorials/from_data/","page":"Construct surveys programmatically","title":"Construct surveys programmatically","text":"In this tutorial we will see how we can build surveys from an external data source.  The iterative survey construction method in CitrusBuilder makes it easy to accomplish this task.","category":"page"},{"location":"tutorials/from_data/","page":"Construct surveys programmatically","title":"Construct surveys programmatically","text":"Consider for example that you have a csv file for each survey where each row defines a question in the survey.  The questions might be default questions or more complex custom question types as described in the tutorial Constructing custom question types.","category":"page"},{"location":"tutorials/from_data/","page":"Construct surveys programmatically","title":"Construct surveys programmatically","text":"A sample csv file might look like this, ","category":"page"},{"location":"tutorials/from_data/","page":"Construct surveys programmatically","title":"Construct surveys programmatically","text":"using CSV, DataFrames\n\ndata = CSV.read(\"sample.csv\", DataFrame)","category":"page"},{"location":"tutorials/from_data/","page":"Construct surveys programmatically","title":"Construct surveys programmatically","text":"First, we need to match the type column of the data frame to a question type.  In this example we define, ","category":"page"},{"location":"tutorials/from_data/","page":"Construct surveys programmatically","title":"Construct surveys programmatically","text":"text: short_text_question\n1-5: five_point_choice_question","category":"page"},{"location":"tutorials/from_data/","page":"Construct surveys programmatically","title":"Construct surveys programmatically","text":"For convenience we can create a custom function that maps the string in the data frame to a CitrusBuilder.Question","category":"page"},{"location":"tutorials/from_data/","page":"Construct surveys programmatically","title":"Construct surveys programmatically","text":"using CitrusBuilder\n\nfunction question(type, args...; kwargs...)\n    if type == \"text\"\n        return short_text_question(args...; kwargs...)\n    elseif type == \"1-5\"\n        return five_point_choice_question(args...; kwargs...)\n    else\n        error(\"unknown question type\")\n    end\nend","category":"page"},{"location":"tutorials/from_data/","page":"Construct surveys programmatically","title":"Construct surveys programmatically","text":"This function will return the required question type. Now we can set up an empty survey,","category":"page"},{"location":"tutorials/from_data/","page":"Construct surveys programmatically","title":"Construct surveys programmatically","text":"survey_from_data = survey(123456, \"A survey from data\")","category":"page"},{"location":"tutorials/from_data/","page":"Construct surveys programmatically","title":"Construct surveys programmatically","text":"and append an empty question group as required by LimeSurvey.","category":"page"},{"location":"tutorials/from_data/","page":"Construct surveys programmatically","title":"Construct surveys programmatically","text":"g1 = append!(survey_from_data, question_group(1, \"\"))","category":"page"},{"location":"tutorials/from_data/","page":"Construct surveys programmatically","title":"Construct surveys programmatically","text":"All that is left to do is to append questions by iterating over each row in the data frame.","category":"page"},{"location":"tutorials/from_data/","page":"Construct surveys programmatically","title":"Construct surveys programmatically","text":"for row in eachrow(data)\n    q = question(row.type, \"q\" * string(row.position), string(row.title), mandatory=row.mandatory)\n    append!(g1, q)\nend\n\nsurvey_from_data","category":"page"},{"location":"tutorials/","page":"-","title":"-","text":"some overview","category":"page"},{"location":"lib/functions/","page":"Functions","title":"Functions","text":"CurrentModule = CitrusBuilder","category":"page"},{"location":"lib/functions/#Functions","page":"Functions","title":"Functions","text":"","category":"section"},{"location":"lib/functions/#Index","page":"Functions","title":"Index","text":"","category":"section"},{"location":"lib/functions/","page":"Functions","title":"Functions","text":"Pages = [\"functions.md\"]","category":"page"},{"location":"lib/functions/#Constructors","page":"Functions","title":"Constructors","text":"","category":"section"},{"location":"lib/functions/","page":"Functions","title":"Functions","text":"Base.append!\nBase.insert!\nBase.prepend!","category":"page"},{"location":"lib/functions/#Base.append!","page":"Functions","title":"Base.append!","text":"append!(component::AbstractSurveyComponent, item)\n\nInsert one or multiple items to the end of component's children. Returns the appended item.\n\nExamples\n\njulia> s = survey(100000, \"my survey\")\njulia> append!(s, question_group(1, \"a question group\"))\n\njulia> s = survey(100000, \"my survey\")\njulia> append!(s, [\n    question_group(1, \"first question group\"),\n    question_group(2, \"second question group\")\n])\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#Base.insert!","page":"Functions","title":"Base.insert!","text":"insert!(component::AbstractSurveyComponent, index::Integer, item)\n\nInsert one or multiple items into component's children at the given index. Returns the appended item.\n\nExamples\n\njulia> s = survey(100000, \"my survey\") do\n    question_group(1, \"first question group\"),\n    question_group(2, \"second question group\")\nend\njulia> insert!(s, 2, question_group(3, \"between first and second question group\"))\njulia> s\nSurvey with 3 groups and 0 questions.\nmy survey (id: 100000)\n├── first question group (id: 1)\n├── between first and second question group (id: 3)\n└── second question group (id: 2)\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#Base.prepend!","page":"Functions","title":"Base.prepend!","text":"prepend!(component::AbstractSurveyComponent, item)\n\nInsert one or multiple items to the beginning of component's children. Returns the prepended item.\n\nExamples\n\njulia> s = survey(100000, \"my survey\")\njulia> prepend!(s, question_group(1, \"first question group\"))\n\njulia> g = question_group(1, \"a question group\")\njulia> qs = [\n    gender_select(\"q1\", \"A gender select\"),\n    short_text_question(\"q2\", \"Please state your full name.\")\n]\njulia> prepend!(g, qs)\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#Survey","page":"Functions","title":"Survey","text":"","category":"section"},{"location":"lib/functions/","page":"Functions","title":"Functions","text":"survey","category":"page"},{"location":"lib/functions/#CitrusBuilder.survey","page":"Functions","title":"CitrusBuilder.survey","text":"survey(id, title::String; children)\n\nConstruct a single-language Survey. children is an optional keyword argument and can be omitted.\n\nExamples\n\nSurvey without children\n\njulia> s = survey(100000, \"my survey\")\nSurvey with 0 groups and 0 questions.\nmy survey (id: 100000)\n\n\nsurvey with children\n\njulia> s = survey(100000, \"my survey\", children = [\n    question_group(1, \"first question group\"),\n    question_group(2, \"second question group\")\n])\nSurvey with 2 groups and 0 questions.\nmy survey (id: 100000)\n├── first question group (id: 1)\n└── second question group (id: 2)\n\n\n\n\n\nsurvey(children::Function, id, title::String)\n\nConstruct a single-language Survey using do ... end syntax.\n\nExamples\n\njulia> s = survey(100000, \"my survey\") do\n    question_group(1, \"first question group\"),\n    question_group(2, \"second question group\")\nend\nSurvey with 2 groups and 0 questions.\nmy survey (id: 100000)\n├── first question group (id: 1)\n└── second question group (id: 2)\n\n\n\n\n\n\nsurvey(id, language_settings::LanguageSettings; children)\n\nConstruct a multi-language Survey. children is an optional keyword argument and can be omitted.\n\nExamples\n\nSurvey without children\n\njulia> s = survey(100000, language_settings([\n    language_setting(\"en\", \"A multi-language survey\"),\n    language_setting(\"de\", \"Eine mehrsprachige Umfrage\")\n]))\nSurvey with 0 groups and 0 questions.\nA multi-language survey (id: 100000)\n\nSurvey with children\n\njulia> s = survey(100000, language_settings([\n    language_setting(\"en\", \"A multi-language survey\"),\n    language_setting(\"de\", \"Eine mehrsprachige Umfrage\")\n]), children = [question_group(1, language_settings([\n    language_setting(\"en\", \"first question group\"),\n    language_setting(\"de\", \"Erste Fragengruppe\")\n]))])\nSurvey with 1 group and 0 questions.\nA multi-language survey (id: 100000)\n└── first question group (id: 1)\n\n\n\n\n\nsurvey(children::Function, id, language_settings::LanguageSettings)\n\nConstruct a multi-language Survey using do ... end syntax.\n\nExamples\n\njulia> s = survey(100000, language_settings([\n    language_setting(\"en\", \"A multi-language survey\"),\n    language_setting(\"de\", \"Eine mehrsprachige Umfrage\")\n])) do\n    question_group(1, language_settings([\n        language_setting(\"en\", \"first question group\"),\n        language_setting(\"de\", \"Erste Fragengruppe\")\n    ]))\nend\nSurvey with 1 group and 0 questions.\nA multi-language survey (id: 100000)\n└── first question group (id: 1)\n\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#QuestionGroup","page":"Functions","title":"QuestionGroup","text":"","category":"section"},{"location":"lib/functions/","page":"Functions","title":"Functions","text":"question_group","category":"page"},{"location":"lib/functions/#CitrusBuilder.question_group","page":"Functions","title":"CitrusBuilder.question_group","text":"question_group(id, title::String; description, children)\n\nConstruct a single-language question group. Both description and children are optional keyword arguments that can be omitted.\n\nExamples\n\njulia> g = question_group(1, \"a question group\")\n\njulia> g = question_group(1, \"a question group\"; description=\"A simple description\")\n\njulia> questions = [short_text_question(\"q$i\", \"question $i\") for i in 1:3]\njulia> g = question_group(1, \"a question group\"; children=questions)\n\n\n\n\n\nquestion_group(children::Function, id, title::String; description)\n\nConstruct a single-language question group using do...end syntax. description is an optional keyword argument that can be omitted.\n\nExamples\n\njulia> g = question_group(1, \"a question group\") do\n    short_text_question(\"q1\", \"first question\")\nend\n\n\n\n\n\nquestion_group(id, language_settings::LanguageSettings; children)\n\nConstruct a multi-language question group. children is an optional keywird argument that can be omitted.\n\nExamples\n\njulia> g = question_group(1, language_settings([\n    language_setting(\"de\", \"Eine Fragengruppe\"),\n    language_setting(\"en\", \"A question group\")\n]))\n\n\n\n\n\nquestion_group(children::Function, id, language_settings::LanguageSettings)\n\nConstruct a multi-language question group using do...end syntax.\n\nExamples\n\njulia> g = question_group(1, language_settings([\n    language_setting(\"de\", \"Eine Fragengruppe\"),\n    language_setting(\"en\", \"A question group\")\n])) do\n    short_text_question(\"q1\", language_settings([\n        language_setting(\"de\", \"Eine Frage\")\n        language_setting(\"en\", \"A question\")\n    ]))\nend\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#Question","page":"Functions","title":"Question","text":"","category":"section"},{"location":"lib/functions/","page":"Functions","title":"Functions","text":"CitrusBuilder.jl provides convencience constructors for all question types described in the LimeSurvey Manual.","category":"page"},{"location":"lib/functions/#Text-Questions","page":"Functions","title":"Text Questions","text":"","category":"section"},{"location":"lib/functions/","page":"Functions","title":"Functions","text":"short_text_question\nlong_text_question\nhuge_text_question\nmultiple_short_text_question","category":"page"},{"location":"lib/functions/#CitrusBuilder.short_text_question","page":"Functions","title":"CitrusBuilder.short_text_question","text":"short_text_question(id, language_settings::LanguageSettings; kwargs...)\nshort_text_question(id, title::String; help=nothing, default=nothing, kwargs...)\n\nConstruct a short text question. If the question is constructed using a title, the global default language is used by default.\n\nFor a list of available keyword arguments see Question.\n\nExamples\n\nSimple short text questions using a single language can be constructed using a title string.\n\njulia> q = short_text_question(\"q1\", \"my question\")\n\nTo construct a multi-language short text question, use language_settings.\n\njulia> q = short_text_question(\"q2\", language_settings([\n    language_setting(\"en\", \"question title\"),\n    language_setting(\"de\", \"Fragetitel\")\n]))\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#CitrusBuilder.long_text_question","page":"Functions","title":"CitrusBuilder.long_text_question","text":"long_text_question(id, language_settings::LanguageSettings; kwargs...)\n\nConstruct a multi-language long text question.\n\nFor a list of available keyword arguments see Question.\n\n\n\n\n\nlong_text_question(id, title::String; help, default, kwargs...)\n\nConstruct a single-language long text question.\n\nFor a list of available keyword arguments see Question.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#CitrusBuilder.huge_text_question","page":"Functions","title":"CitrusBuilder.huge_text_question","text":"huge_text_question(id, language_settings::LanguageSettings; kwargs...)\n\nConstruct a multi-language long text question.\n\nFor a list of available keyword arguments see Question.\n\n\n\n\n\nhuge_text_question(id, title::String; help, default, kwargs...)\n\nConstruct a single-language long text question.\n\nFor a list of available keyword arguments see Question.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#CitrusBuilder.multiple_short_text_question","page":"Functions","title":"CitrusBuilder.multiple_short_text_question","text":"multiple_short_text_question(id, language_settings::LanguageSettings; subquestions, kwargs...)\n\nConstruct a multi-language multiple short text question.\n\nFor a list of available keyword arguments see Question.\n\n\n\n\n\nmultiple_short_text_question(id, title::String; subquestions, help, kwargs...)\n\nConstruct a single-language multiple short text question.\n\nFor a list of available keyword arguments see Question.\n\n\n\n\n\nmultiple_short_text_question(children::Function, id, language_settings::LanguageSettings; kwargs...)\n\nConstruct a multi-language multiple short text question using do...end syntax.\n\nFor a list of available keyword arguments see Question.\n\n\n\n\n\nmultiple_short_text_question(children::Function, id, title::String; help, kwargs...)\n\nConstruct a single-language multiple short text question using do...end syntax.\n\nFor a list of available keyword arguments see Question.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#Single-Choice-Questions","page":"Functions","title":"Single Choice Questions","text":"","category":"section"},{"location":"lib/functions/","page":"Functions","title":"Functions","text":"five_point_choice_question\ndropdown_list_question\nradio_list_question","category":"page"},{"location":"lib/functions/#CitrusBuilder.five_point_choice_question","page":"Functions","title":"CitrusBuilder.five_point_choice_question","text":"five_point_choice_question(id, language_settings::LanguageSettings; kwargs...)\n\nConstruct a multi-language five point choice question.\n\nFor a list of available keyword arguments see Question.\n\n\n\n\n\nfive_point_choice_question(id, title::String; help=nothing, kwargs...)\n\nConstruct a single-language five point choice question.\n\nFor a list of available keyword arguments see Question.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#CitrusBuilder.dropdown_list_question","page":"Functions","title":"CitrusBuilder.dropdown_list_question","text":"dropdown_list_question(id, language_settings::LanguageSettings, options::ResponseScale; kwargs...)\n\nConstruct a multi-language dropdown list question.\n\nFor a list of available keyword arguments see Question.\n\n\n\n\n\ndropdown_list_question(id, title::String, optins::ResponseScale; help=nothing, kwargs...)\n\nConstruct a single-language dropdown list question.\n\nFor a list of available keyword arguments see Question.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#CitrusBuilder.radio_list_question","page":"Functions","title":"CitrusBuilder.radio_list_question","text":"radio_list_question(id, language_settings::LanguageSettings, options::ResponseScale; comment=false, kwargs...)\n\nConstruct a multi-language radio list question.\n\nFor a list of additional keyword arguments see Question.\n\n\n\n\n\nradio_list_question(id, title::String, options::ResponseScale; help=nothing, kwargs...)\n\nConstruct a single-language radio list question.\n\nFor a list of additional keyword arguments see Question.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#Multiple-Choice-Questions","page":"Functions","title":"Multiple Choice Questions","text":"","category":"section"},{"location":"lib/functions/","page":"Functions","title":"Functions","text":"multiple_choice_question","category":"page"},{"location":"lib/functions/#CitrusBuilder.multiple_choice_question","page":"Functions","title":"CitrusBuilder.multiple_choice_question","text":"multiple_choice_question(id, language_settings::LanguageSettings; subquestions, comments=false, kwargs...)\n\nConstruct a multi-language multiple choice question.\n\nFor a list of additional keyword arguments see Question.\n\n\n\n\n\nmultiple_choice_question(id, title::String; subquestions, help=nothing, kwargs...)\n\nConstruct a single-language multiple choice question.\n\nFor a list of additional keyword arguments see Question.\n\n\n\n\n\nmultiple_choice_question(children::Function, id, language_settings::LanguageSettings; kwargs...)\n\nConstruct a multi-language multiple choice question using do...end syntax.\n\nFor a list of additional keyword arguments see Question.\n\n\n\n\n\nmultiple_choice_question(children::Function, id, title::String; kwargs...)\n\nConstruct a single-language multiple choice question using do...end syntax.\n\nFor a list of additional keyword arguments see Question.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#Array-Questions","page":"Functions","title":"Array Questions","text":"","category":"section"},{"location":"lib/functions/","page":"Functions","title":"Functions","text":"array_five_point_choice_question\narray_ten_point_choice_question\narray_yes_no_question\narray_increase_decrease_question\narray_question","category":"page"},{"location":"lib/functions/#CitrusBuilder.array_five_point_choice_question","page":"Functions","title":"CitrusBuilder.array_five_point_choice_question","text":"array_five_point_choice_question(id, language_settings::LanguageSettings; subquestions, kwargs...)\narray_five_point_choice_question(id, title::String; subquestions, help=nothing, kwargs...)\narray_five_point_choice_question(children::Function, id, language_settings::LanguageSettings; kwargs...)\narray_five_point_choice_question(children::Function, id, title::String; kwargs...)\n\nConstruct an array five point choice question.\n\nFor a list of additional keyword arguments see Question.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#CitrusBuilder.array_ten_point_choice_question","page":"Functions","title":"CitrusBuilder.array_ten_point_choice_question","text":"array_ten_point_choice_question(id, language_settings::LanguageSettings; subquestions, kwargs...)\narray_ten_point_choice_question(id, title::String; subquestions, help=nothing, kwargs...)\narray_ten_point_choice_question(children::Function, id, language_settings::LanguageSettings; kwargs...)\narray_ten_point_choice_question(children::Function, id, title::String; kwargs...)\n\nConstruct an array ten point choice question.\n\nFor a list of additional keyword arguments see Question.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#CitrusBuilder.array_yes_no_question","page":"Functions","title":"CitrusBuilder.array_yes_no_question","text":"array_yes_no_question(id, language_settings::LanguageSettings; subquestions, kwargs...)\narray_yes_no_question(id, title::String; subquestions, help=nothing, kwargs...)\narray_yes_no_question(children::Function, id, language_settings::LanguageSettings; kwargs...)\narray_yes_no_question(children::Function, id, title::String; kwargs...)\n\nConstruct an array yes/no question.\n\nFor a list of additional keyword arguments see Question.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#CitrusBuilder.array_increase_decrease_question","page":"Functions","title":"CitrusBuilder.array_increase_decrease_question","text":"array_increase_decrease_question(id, language_settings::LanguageSettings; subquestions, kwargs...)\narray_increase_decrease_question(id, title::String; subquestions, help=nothing, kwargs...)\narray_increase_decrease_question(children::Function, id, language_settings::LanguageSettings; kwargs...)\narray_increase_decrease_question(children::Function, id, title::String; kwargs...)\n\nConstruct an array increase/decrease question.\n\nFor a list of additional keyword arguments see Question.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#CitrusBuilder.array_question","page":"Functions","title":"CitrusBuilder.array_question","text":"array_question(id, language_settings::LanguageSettings, options::VectorOrElemenet{ResponseScale}; subquestions, type=\"default\", kwargs...)\narray_question(id, title::String, options::VectorOrElement{ResponseScale}; help=nothing, kwargs...)\narray_question(children::Function, id, language_settings::LanguageSettings, options; kwargs...)\narray_question(children::Function, id, title::String, options; kwargs...)\n\nConstruct an array question.\n\nSpecify the question type to determine which kind of array question is to be constructed. If type=\"dual\" then an array of 2 ResponseScale must be provided. Otherwise a single ResponseScale is required.\n\nAvailable types\n\n\"default\": Array\n\"text\": Array (Texts)\n\"dropdown\": Array (Numbers)\n\"dual\": Array dual scale\n\"bycolumn\": Array by column\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#Mask-Questions","page":"Functions","title":"Mask Questions","text":"","category":"section"},{"location":"lib/functions/","page":"Functions","title":"Functions","text":"date_select\nfile_upload\ngender_select\nlanguage_switch\nnumerical_input\nmultiple_numerical_input\nranking\ntext_display\nyes_no_question\nequation","category":"page"},{"location":"lib/functions/#CitrusBuilder.date_select","page":"Functions","title":"CitrusBuilder.date_select","text":"date_select(id, language_settings::LanguageSettings; minimum=nothing, maximum=nothing, kwargs...)\ndate_select(id, title::String; help=nothing, kwargs...)\n\nConstruct a date select question.\n\nKeyword arguments\n\nminimum: The minimum allowed date\nmaximum: The maximum allowed date\n\nFor a list of additional keyword arguments see Question.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#CitrusBuilder.file_upload","page":"Functions","title":"CitrusBuilder.file_upload","text":"file_upload(id, language_settings::LanguageSettings; kwargs...)\nfile_upload(id, title::String; help=nothing, kwargs...)\n\nConstruct a file upload question.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#CitrusBuilder.gender_select","page":"Functions","title":"CitrusBuilder.gender_select","text":"gender_select(id, language_settings::LanguageSettings; kwargs...)\n\nConstruct a multi-language gender select.\n\n\n\n\n\ngender_select(id, title::String; help=nothing, kwargs...)\n\nConstruct a single-language gender select.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#CitrusBuilder.language_switch","page":"Functions","title":"CitrusBuilder.language_switch","text":"language_switch(id, language_settings::LanguageSettings; kwargs...)\n\nConstruct a multi-language language switch.\n\n\n\n\n\nlanguage_switch(id, title::String; help=nothing, kwargs...)\n\nConstruct a single-language language switch.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#CitrusBuilder.numerical_input","page":"Functions","title":"CitrusBuilder.numerical_input","text":"numerical_input(id, language_settings::LanguageSettings; minimum=nothing, maximum=nothing, integer_only=false, kwargs...)\nnumerical_input(id, title::String; help=nothing, kwargs...)\n\nConstruct a multi-language numerical input.\n\nKeyword arguments\n\nminimum: The minimum value\nmaximum: The maximum value\ninteger_only: Permit only integer values\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#CitrusBuilder.multiple_numerical_input","page":"Functions","title":"CitrusBuilder.multiple_numerical_input","text":"multiple_numerical_input(id, language_settings::LanguageSettings; subquestions, kwargs...)\nmultiple_numerical_input(id, title::String; subquestions, help=nothing, kwargs...)\nmultiple_numerical_input(children::Function, id, language_settings::LanguageSettings; kwargs...)\nmultiple_numerical_input(children::Function, id, title::String; kwargs...)\n\nConstruct a multiple numerical input question.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#CitrusBuilder.ranking","page":"Functions","title":"CitrusBuilder.ranking","text":"ranking(id, language_settings::LanguageSettings, options::ResponseScale; kwargs...)\nranking(id, title::String, options::ResponseScale; help=nothing, kwargs...)\n\nConstruct a ranking question.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#CitrusBuilder.text_display","page":"Functions","title":"CitrusBuilder.text_display","text":"text_display(id, language_settings::LanguageSettings; kwargs...)\ntext_display(id, title::String; help=nothing, kwargs...)\n\nConstruct a text display question.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#CitrusBuilder.yes_no_question","page":"Functions","title":"CitrusBuilder.yes_no_question","text":"yes_no_question(id, language_settings::LanguageSettings; kwargs...)\nyes_no_question(id, title::String; help=nothing, kwargs...)\n\nConstruct a yes/no question.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#CitrusBuilder.equation","page":"Functions","title":"CitrusBuilder.equation","text":"equation(id, language_settings::LanguageSettings; kwargs...)\nequation(id, title::String; help=nothing, kwargs...)\n\nConstruct an equation question.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#SubQuestion","page":"Functions","title":"SubQuestion","text":"","category":"section"},{"location":"lib/functions/","page":"Functions","title":"Functions","text":"subquestion","category":"page"},{"location":"lib/functions/#CitrusBuilder.subquestion","page":"Functions","title":"CitrusBuilder.subquestion","text":"subquestion(; id, language_settings, relevance = \"1\")\n\nConstruct a multi-language subquestion.\n\n\n\n\n\nsubquestion(; id, title, relevance = \"1\")\n\nConstruct a subquestion using the default survey language.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#LanguageSettings","page":"Functions","title":"LanguageSettings","text":"","category":"section"},{"location":"lib/functions/","page":"Functions","title":"Functions","text":"language_settings\nlanguage_setting","category":"page"},{"location":"lib/functions/#CitrusBuilder.language_settings","page":"Functions","title":"CitrusBuilder.language_settings","text":"language_settings(settings; same_default=false)\nlanguage_settings(language, title; same_default=false, kwargs...)\n\nConstruct LanguageSettings for a survey component. Settings for single can either be provided as settings::Vector{LanguageSetting} (see also language_setting) or a combination of language and title.\n\nIf multiple languages are provided and same_default=true then the default value of the default language is inherited by all other languages.\n\nExamples\n\nSimple construction of language settings for a single language:\n\nlanguage_settings(\"de\", \"Ein Titel\")\n\nIf multiple languages are needed, construct settings using a vector of language_setting\n\nlanguage_settings([\n    language_setting(\"en\", \"A title\"),\n    language_setting(\"de\", \"Ein Titel\")\n])\n\nTo inherit the default value of the default language, same_default can be used\n\nlanguage_settings([\n    language_setting(\"en\", \"title\", default=\"placeholder value\"),\n    language_setting(\"de\", \"Titel\")\n], same_default=true)\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#CitrusBuilder.language_setting","page":"Functions","title":"CitrusBuilder.language_setting","text":"language_setting(language, title; kwargs...)\n\nConstruct a LanguageSetting for a survey component.\n\nArguments\n\nlanguage: A language code. For a list of all available languages see https://translate.limesurvey.org/languages/\ntitle: The title of the survey component\n\nKeyword arguments\n\ndescription: A description of the survey component\nhelp: A help text that is displayed for the survey component (questions only)\ndefault: The default value of the survey component (questions only)\n\nExamples\n\nlanguage_setting(\"en\", \"title\")\nlanguage_setting(\"en\", \"question title\", help=\"some help for survey participants\")\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#Accessors","page":"Functions","title":"Accessors","text":"","category":"section"},{"location":"lib/functions/","page":"Functions","title":"Functions","text":"id\ntitle\nhelp\nhas_description\ndescription\nlanguages\nsame_default\nhas_help\ndefault_language\ndefault\nhas_default\nis_mandatory\nhas_other\nhas_subquestions\nhas_response_options\nhas_attributes\nattributes","category":"page"},{"location":"lib/functions/#CitrusBuilder.id","page":"Functions","title":"CitrusBuilder.id","text":"id(component::AbstractSurveyComponent)\n\nReturn the id of a survey component.\n\nExamples\n\njulia> q = short_text_question(\"q1\", \"title\")\njulia> id(q)\n\"q1\"\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#CitrusBuilder.title","page":"Functions","title":"CitrusBuilder.title","text":"title(component::AbstractSurveyComponent, language::String)\n\nReturn the title of the a survey component for a given language. If language is not provided the title for the default language of the component is returned.\n\nExamples\n\njulia> g = question_group(1, \"my title\")\njulia> title(g)\n\"my title\"\n\njulia> g = question_group(1, language_settings([\n    language_setting(\"en\", \"my title\"),\n    language_setting(\"de\", \"Mein Titel\")\n]))\njulia> title(g, \"en\")\n\"my title\"\njulia> title(g, \"de\")\n\"Mein Titel\"\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#CitrusBuilder.help","page":"Functions","title":"CitrusBuilder.help","text":"help(component::AbstractSurveyComponent, language::String)\n\nReturn the help string of a survey component for a given language. If language is not provided the help for the default language of the component is returned.\n\nExamples\n\njulia> q = short_text_question(\"q1\", \"my question\", help=\"some help\")\njulia> help(q)\n\"some help\"\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#CitrusBuilder.has_description","page":"Functions","title":"CitrusBuilder.has_description","text":"has_description(component::AbstractSurveyComponent, language::String)\n\nReturns whether or not the survey component has a description for a given language. If language is not provided the value for the default language of the component is returned.\n\nExamples\n\njulia> q = short_text_question(\"q1\", \"title\")\njulia> has_description(q)\nfalse\n\njulia> q = short_text_question(\"q2\", \"title\", description=\"some description\")\njulia> has_description(q)\ntrue\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#CitrusBuilder.description","page":"Functions","title":"CitrusBuilder.description","text":"description(component::AbstractSurveyComponent, language::String)\n\nReturns the description of a survey component for a given language. If language is not provided the description for the default language of the component is returned.\n\nExamples\n\njulia> q = short_text_question(\"q1\", \"title\", description=\"answer this question\")\njulia> description(q)\n\"answer this question\"\n\njulia> q = short_text_question(\"q2\", language_settings([\n    language_setting(\"en\", \"some description\"),\n    language_setting(\"de\", \"Eine Beschreibung\")\n]))\njulia> description(q)\n\"some description\"\n\njulia> description(q, \"de\")\n\"Eine Beschreibung\"\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#CitrusBuilder.languages","page":"Functions","title":"CitrusBuilder.languages","text":"languages(component::AbstractSurveyComponent)\n\nReturn a vector of languages of a survey component.\n\nExamples\n\nFor components with a single language\n\njulia> s = survey(100000, \"survey title\")\njulia> languages(s)\n[\"en\"]\n\nFor multi-language components\n\njulia> q = short_text_question(\"q1\", language_settings([\n    language_setting(\"en\", \"title\"),\n    language_setting(\"de\", \"Titel\")\n]))\njulia> languages(q)\n[\"en\", \"de\"]\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#CitrusBuilder.same_default","page":"Functions","title":"CitrusBuilder.same_default","text":"same_default(component::AbstractSurveyComponent)\n\nReturn if the survey component uses the same default value for all languages.\n\nExamples\n\njulia> q = short_text_question(\"q1\", \"title\", default=\"some default value\")\njulia> same_default(q)\nfalse\n\njulia> q = short_text_question(\"q1\", language_settings([\n    language_setting(\"en\", \"title\", default=\"some default value\"),\n    language_setting(\"de\", \"Titel\")\n], same_default=true))\njulia> same_default(q)\ntrue\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#CitrusBuilder.has_help","page":"Functions","title":"CitrusBuilder.has_help","text":"has_help(component::AbstractSurveyComponent, language::String)\n\nReturn whether or not the survey component has a help string for a given language. If language is not provided the value for the default language of the component is returned.\n\nExamples\n\njulia> q = short_text_question(\"q1\", \"title\")\njulia> has_help(q)\nfalse\n\njulia> q = short_text_question(\"q2\", \"title\", help=\"some help\")\njulia> has_help(q)\ntrue\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#CitrusBuilder.default_language","page":"Functions","title":"CitrusBuilder.default_language","text":"default_language(component::AbstractSurveyComponent)\n\nReturn the default language of a survey component. The default language is defined as the first language of the component.\n\nExamples\n\njulia> g = question_group(1, \"group title\")\njulia> default_language(g)\n\"en\"\n\nnote: Note\nThe default language of a survey component is not necessarily equal to the global default language set by set_default_language!.\n\njulia> default_language()\n\"en\"\njulia> g = question_group(1, language_settings([\n    language_setting(\"de\", \"Gruppentitel\"),\n    language_settings(\"en\", \"group title\")\n]))\njulia> default_language(g)\n\"de\"\n\n\n\n\n\ndefault_language()\n\nGet the currently set default language (default: \"en\"). If no explicit language is provided when constructing Survey, QuestionGroup or Question the survey components will inherit the default language.\n\nSee also\n\nTo set the default language use set_default_language!\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#CitrusBuilder.default","page":"Functions","title":"CitrusBuilder.default","text":"default(component::AbstractSurveyComponent, language::String)\n\nReturn the default value of a survey component. If language is provided the default value for the default language of the component is returned.\n\nExamples\n\njulia> q = short_text_question(\"q1\", language_settings([\n    language_setting(\"en\", \"title\", default=\"placeholder\"),\n    language_setting(\"de\", \"Titel\", default=\"Platzhalter\")\n]))\njulia> default(q)\n\"placeholder\"\njulia> default(q, \"en\")\n\"placeholder\"\njulia> default(q, \"de\")\n\"Platzhalter\"\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#CitrusBuilder.has_default","page":"Functions","title":"CitrusBuilder.has_default","text":"has_default(component::AbstractSurveyComponent, language::String)\n\nReturn whether or not a survey component has a default value for a given language. If language is not provided the default value for the default language of the component is returned.\n\nExamples\n\njulia> q = short_text_question(\"q1\", \"title\")\njulia> has_default(q)\nfalse\n\njulia> q = short_text_question(\"q2\", \"title\", default=\"placeholder\")\njulia> has_default(q)\ntrue\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#CitrusBuilder.is_mandatory","page":"Functions","title":"CitrusBuilder.is_mandatory","text":"is_mandatory(question::Question)\n\nCheck if a Question is mandatory.\n\nExamples\n\njulia> q = short_text_question(\"q1\", \"A question\")\njulia> is_mandatory(q)\nfalse\n\njulia> q = short_text_question(\"q1\", \"A mandatory question\", mandatory=true)\njulia> is_mandatory(q)\ntrue\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#CitrusBuilder.has_other","page":"Functions","title":"CitrusBuilder.has_other","text":"has_other(question::Question)\n\nCheck if a Question has response option 'other'.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#CitrusBuilder.has_subquestions","page":"Functions","title":"CitrusBuilder.has_subquestions","text":"has_subquestions(question::Question)\n\nCheck if a Question has any subquestions.\n\nExamples\n\njulia> q = short_text_question(\"q1\", \"A question\")\njulia> has_subquestions(q)\nfalse\n\njulia> q = multiple_short_text_question(\"q1\", \"Multiple questions\") do\n    subquestion(\"sq1\", \"subquestion 1\"),\n    subquestion(\"sq2\", \"subquestion 2\")\nend\njulia> has_subquestions(q)\ntrue\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#CitrusBuilder.has_response_options","page":"Functions","title":"CitrusBuilder.has_response_options","text":"has_response_options(questions::Question)\n\nCheck if a Question has any response options.\n\nExamples\n\njulia> q = five_point_choice_question(\"q1\", \"A question\")\njulia> has_response_options(q)\nfalse\n\njulia> options = response_scale([response_option(\"o1\", \"option 1\")])\njulia> q = dropdown_list_question(\"q1\", \"A dropdown question\", options)\njulia> has_response_options(q)\ntrue\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#CitrusBuilder.has_attributes","page":"Functions","title":"CitrusBuilder.has_attributes","text":"has_attributes(question::Question)\n\nCheck if a Question has any attributes.\n\nExamples\n\njulia> q = numerical_input(\"q1\", \"An input\")\njulia> has_attributes(q)\nfalse\n\njulia> q = numerical_input(\"q1\", \"An input with attributes\", minimum=0, maximum=10)\njulia> has_attributes(q)\ntrue\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#CitrusBuilder.attributes","page":"Functions","title":"CitrusBuilder.attributes","text":"attributes(question::Question)\n\nGet the attributes of a Question.\n\nExamples\n\njulia> q = numerical_input(\"q1\", \"A numerical input\", minimum=0, maximum=10)\njulia> attributes(q)\nDict{String, Any} with 2 entries:\n  \"min_num_value_n\" => 0\n  \"max_num_value_n\" => 10\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#Setters","page":"Functions","title":"Setters","text":"","category":"section"},{"location":"lib/functions/","page":"Functions","title":"Functions","text":"set_default_language!","category":"page"},{"location":"lib/functions/#CitrusBuilder.set_default_language!","page":"Functions","title":"CitrusBuilder.set_default_language!","text":"set_default_language!(lang::String)\n\nSet DEFAULT_LANGUAGE of CitrusBuilder.\n\nExamples\n\nset_default_language!(\"de\")\n[ Info: Default language set to 'de'.\n\nSee also\n\nTo get the current value of DEFAULT_LANGUAGE see default_language.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#IO","page":"Functions","title":"IO","text":"","category":"section"},{"location":"lib/functions/","page":"Functions","title":"Functions","text":"write","category":"page"},{"location":"lib/functions/#Base.write","page":"Functions","title":"Base.write","text":"write(filename::AbstractString, survey::Survey)\n\nWrite the XML structure of survey to a file. Make sure that the filename extension is .lss for the import in LimeSurvey.\n\nExamples\n\njulia> s = survey(100000, \"my survey\")\njulia> write(\"mysurvey.lss\", s)\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#XML","page":"Functions","title":"XML","text":"","category":"section"},{"location":"lib/functions/","page":"Functions","title":"Functions","text":"xml","category":"page"},{"location":"lib/functions/#CitrusBuilder.xml","page":"Functions","title":"CitrusBuilder.xml","text":"xml(survey::Survey)\n\nConstruct an XML document from a Survey object.\n\nExamples\n\njulia> s = survey(100000, \"my survey\")\njulia> xml(s)\n\n\n\n\n\n","category":"function"},{"location":"getting_started/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Welcome to the CitrusBuilder Getting Started section!  CitrusBuilder is a Julia package that allows you to construct LimeSurveys within Julia export their XML structure. The exported .lss files can then be imported into a running LimeSurvey instance.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Surveys can be imported by using","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"LimeSurveys import functionality, or \nthe RemoteControl 2 API.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"If you are interested in calling the LimeSurvey RemoteControl 2 API from Julia, you can take a look at LimeSurveyAPI.jl.","category":"page"},{"location":"getting_started/#Installation","page":"Getting Started","title":"Installation","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"At the current stage CitrusBuilder is under development and is not registered in the Julia General repository.  In order to install the package you have to install it from GitHub.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"To install the package open a Julia REPL and execute the following commands, which will install CitrusBuilder from the main branch of the GitHub repository.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"using Pkg\nPkg.add(url=\"https://github.com/p-gw/CitrusBuilder.jl\", rev=\"main\")","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"note: Note\nPlease note that CitrusBuilder.jl is currently under active development.  Therefore the provided API is subject to change.  Keep this in mind if you wish to use CitrusBuilder in your project.","category":"page"},{"location":"getting_started/#Now-what?","page":"Getting Started","title":"Now what?","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Now that you have installed CitrusBuilder you can start building your surveys!","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Just call ","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"using CitrusBuilder","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"from the Julia REPL.  You can now define your survey structure by calling the survey function.  In this simple example we construct an empty survey with the survey id 123456 and the title \"Getting started with CitrusBuilder\". ","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"my_survey = survey(123456, \"Getting started with CitrusBuilder\")","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"We can then construct question groups and questions and append! them to the survey.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"group1 = question_group(1, \"first question group\")\nappend!(my_survey, group1)\n\nquestion1 = short_text_question(\"q1\", \"My first question\")\nappend!(group1, question1)\n\nmy_survey","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"For a more detailed introduction to survey construction you can start by working through the tutorial on constructing a basic survey.  This should give you the basic toolset to create your own surveys as fast as possible. ","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Once you are familiar with the basic syntax, you can continue depending on how you want to use this package. Either, ","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Expand the basic survey structure by adding other question types to your survey,\nLearn how to create multi-language surveys,\nLearn how to dynamically generate surveys from data, or \nLearn how to create custom question types.","category":"page"},{"location":"lib/types/","page":"Types","title":"Types","text":"CurrentModule = CitrusBuilder","category":"page"},{"location":"lib/types/#Types","page":"Types","title":"Types","text":"","category":"section"},{"location":"lib/types/#Index","page":"Types","title":"Index","text":"","category":"section"},{"location":"lib/types/","page":"Types","title":"Types","text":"Pages = [\"types.md\"]","category":"page"},{"location":"lib/types/#Type-specification","page":"Types","title":"Type specification","text":"","category":"section"},{"location":"lib/types/","page":"Types","title":"Types","text":"AbstractQuestion\nAbstractSurveyComponent\nLanguageSetting\nLanguageSettings\nQuestion\nQuestionGroup\nResponseOption\nResponseScale\nSubQuestion\nSurvey","category":"page"},{"location":"lib/types/#CitrusBuilder.AbstractQuestion","page":"Types","title":"CitrusBuilder.AbstractQuestion","text":"AbstractQuestion <: AbstractSurveyComponent\n\nAn abstract type representing a question within a LimeSurvey.\n\n\n\n\n\n","category":"type"},{"location":"lib/types/#CitrusBuilder.AbstractSurveyComponent","page":"Types","title":"CitrusBuilder.AbstractSurveyComponent","text":"AbstractSurveyComponent\n\nAn abstract type that represents a component within a LimeSurvey survey.\n\n\n\n\n\n","category":"type"},{"location":"lib/types/#CitrusBuilder.LanguageSetting","page":"Types","title":"CitrusBuilder.LanguageSetting","text":"LanguageSetting\n\nA type representing the settings of a survey component for a single language.\n\nFields\n\nlanguage::String: The definition of the locale\ntitle::title: The title of the survey component in the language\nhelp::Union{Nothing, String}: The help text of the survey component in the language\ndescription::Union{Nothing, String}: The description of the survey component in the language\ndefault::Union{Nothing, String}: The default value of the survey component in the language\n\n\n\n\n\n","category":"type"},{"location":"lib/types/#CitrusBuilder.LanguageSettings","page":"Types","title":"CitrusBuilder.LanguageSettings","text":"LanguageSettings\n\nA type representing a collection of single LanguageSetting.\n\nFields\n\nsettings::Vector{LanguageSetting}: A collection of language settings.\nsame_default::Bool: An indicator whether or not the same default value is used for all languages.\n\n\n\n\n\n","category":"type"},{"location":"lib/types/#CitrusBuilder.Question","page":"Types","title":"CitrusBuilder.Question","text":"Question <: AbstractQuestion\n\nA survey component that stores information about LimeSurvey questions.\n\nFields\n\nid::String: An alphanumeric question id. Must start with a letter.\ntype::String: The LimeSurvey question type\nmandatory::Bool: Determines if the question is mandatory\nother::Bool: Determines if the questions as other category\nrelevance::String: A LimeSurvey Expression Script\nattributes::Dict: Additional question attributes\nlanguage_settings::LanguageSettings: Language Settings for the question\nsubquestions::Vector{Subquestion}: A vector of subquestions\noptions::Vector{ResponseScale}: A vector of response scales.\n\n\n\n\n\n","category":"type"},{"location":"lib/types/#CitrusBuilder.QuestionGroup","page":"Types","title":"CitrusBuilder.QuestionGroup","text":"QuestionGroup <: AbstractSurveyComponent\n\nA type representing a question group within a LimeSurvey\n\nFields\n\nid::Int: An integer-valued ID for the question group\nlanguage_settings::LanguageSettings: The language settings for the question group\nchildren::Vector{Question}: A vector of questions as child elements of the question group\n\n\n\n\n\n","category":"type"},{"location":"lib/types/#CitrusBuilder.ResponseOption","page":"Types","title":"CitrusBuilder.ResponseOption","text":"ResponseOption <: AbstractSurveyComponent\n\nA type representing a single response option for a LimeSurvey question.\n\nFields\n\nid::String: A LimeSurvey ID for the response option\nlanguage_settings::LanguageSettings: The language settings for the response option\n\n\n\n\n\n","category":"type"},{"location":"lib/types/#CitrusBuilder.ResponseScale","page":"Types","title":"CitrusBuilder.ResponseScale","text":"ResponseScale <: AbstractSurveyComponent\n\nA type representing a collection of ResponseOption for a LimeSurvey question.\n\nFields\n\noptions::Vector{ResponseOption}: A vector of response options\nlanguage_settings::LanguageSettings: The language settings for the response scale.\n\n\n\n\n\n","category":"type"},{"location":"lib/types/#CitrusBuilder.SubQuestion","page":"Types","title":"CitrusBuilder.SubQuestion","text":"SubQuestion <: AbstractQuestion\n\nA type representing subquestions of a LimeSurvey question.\n\nFields\n\nid::String: An alphanumeric question id. Must start with a letter.\nquestion::String: The subquestion title.\ntype::String: The LimeSurvey qusetion type\nrelevance::String: A LimeSurvey Expression Script\n\n\n\n\n\n","category":"type"},{"location":"lib/types/#CitrusBuilder.Survey","page":"Types","title":"CitrusBuilder.Survey","text":"Survey <: AbstractSurveyComponent\n\nA type to represent a LimeSurvey.\n\nFields\n\nid::Int: A valid LimeSurvey survey id\nlanguage_settings::LanguageSettings: The surveys language settings\nchildren::Vector{QuestionGroup}: A vector of question groups\n\n\n\n\n\n","category":"type"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = CitrusBuilder","category":"page"},{"location":"#CitrusBuilder.jl","page":"Home","title":"CitrusBuilder.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CitrusBuilder is a tool to construct LimeSurvey surveys within Julia. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"This documentation aims to get you up and running building your surveys in Julia using the CitrusBuilder package. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"If you are a new user of this package, you can start by taking a look at the Getting Started page, which provides a quick overview on how to install and use this package.  Afterwards you can work through the introductory tutorials, ","category":"page"},{"location":"","page":"Home","title":"Home","text":"Construct basic surveys\nConstruct multi-language surveys","category":"page"},{"location":"","page":"Home","title":"Home","text":"More advanced users are free to skip ahead to more advanced topics like","category":"page"},{"location":"","page":"Home","title":"Home","text":"Construct surveys programmatically\nCreating custom question types","category":"page"},{"location":"","page":"Home","title":"Home","text":"While not recommended for first-time users you can also skip the tutorials entirely and see the documentation for the CitrusBuilder.jl API. ","category":"page"},{"location":"tutorials/basic/#Constructing-basic-surveys","page":"Construct basic surveys","title":"Constructing basic surveys","text":"","category":"section"},{"location":"tutorials/basic/","page":"Construct basic surveys","title":"Construct basic surveys","text":"CitrusBuilder offers two different modes of survey building. Both modes of construction are suitable for different use cases. To create simple surveys the survey structure can be created at once by using the do ... end syntax. All survey components that have child elements, e.g. survey, question_group or multiple_short_text_question, do allow for this method of construction.","category":"page"},{"location":"tutorials/basic/","page":"Construct basic surveys","title":"Construct basic surveys","text":"Let's imagine we want to create a simple survey for an introductory statistics class where we want to gather data on the age (in years), gender, and height (in cm) of the students. ","category":"page"},{"location":"tutorials/basic/","page":"Construct basic surveys","title":"Construct basic surveys","text":"In order to accomplish this, we need to construct a survey with ","category":"page"},{"location":"tutorials/basic/","page":"Construct basic surveys","title":"Construct basic surveys","text":"A gender_select, \nA numerical_input for the participants age,\nA numerical_input for the participants height","category":"page"},{"location":"tutorials/basic/","page":"Construct basic surveys","title":"Construct basic surveys","text":"note: Note\nLimeSurvey requires that questions are nested within a question group. In order to construct a valid survey we must respect this restriction even if no question grouping is needed.","category":"page"},{"location":"tutorials/basic/","page":"Construct basic surveys","title":"Construct basic surveys","text":"using CitrusBuilder\n\nmy_statistics_survey = survey(100000, \"Statistics 101 survey\") do\n    question_group(1, \"\") do  # this is a dummy question group, no title needed\n        gender_select(\"gender\", \"Please select your gender.\"),\n        numerical_input(\"age\", \"Please state your age in years.\", minimum=18, integer_only=true),\n        numerical_input(\"height\", \"Please state your height in centimeters.\", minimum=0, maximum=250, integer_only=true)\n    end\nend","category":"page"},{"location":"tutorials/basic/","page":"Construct basic surveys","title":"Construct basic surveys","text":"For the numerical_input questions we also imposed several restrictions provided by LimeSurvey: ","category":"page"},{"location":"tutorials/basic/","page":"Construct basic surveys","title":"Construct basic surveys","text":"age must be at least 18 and can only have integer values,\nheight must be a non-negative integer with a maximum height of 250cm.","category":"page"},{"location":"tutorials/basic/","page":"Construct basic surveys","title":"Construct basic surveys","text":"Now that the survey is complete, it can be exported to an .lss file.","category":"page"},{"location":"tutorials/basic/","page":"Construct basic surveys","title":"Construct basic surveys","text":"write(\"statistics_101.lss\", my_statistics_survey)","category":"page"},{"location":"tutorials/basic/#Alternative-approach","page":"Construct basic surveys","title":"Alternative approach","text":"","category":"section"},{"location":"tutorials/basic/","page":"Construct basic surveys","title":"Construct basic surveys","text":"An alternative to the basic survey construction outlined in the previous section is to build the survey iteratively. CitrusBuilder overloads the Julia Base functions append!, insert!, and prepend!. These functions can be used to append, insert or prepend survey components to a survey respectively. A simple example of this method was given in the Getting Started section.","category":"page"},{"location":"tutorials/basic/","page":"Construct basic surveys","title":"Construct basic surveys","text":"Consider again the example from the previous section: A survey gathering data on the age, gender, and height of the survey participants. Using this approach we first must construct an empty survey,","category":"page"},{"location":"tutorials/basic/","page":"Construct basic surveys","title":"Construct basic surveys","text":"using CitrusBuilder \n\nmy_statistics_survey = survey(100000, \"Statistics 101 survey\")","category":"page"},{"location":"tutorials/basic/","page":"Construct basic surveys","title":"Construct basic surveys","text":"Now we can define and append the required question group to the survey, ","category":"page"},{"location":"tutorials/basic/","page":"Construct basic surveys","title":"Construct basic surveys","text":"g1 = question_group(1, \"\")\nappend!(my_statistics_survey, g1)\n\nmy_statistics_survey","category":"page"},{"location":"tutorials/basic/","page":"Construct basic surveys","title":"Construct basic surveys","text":"Questions can then be appended to the question group g1. ","category":"page"},{"location":"tutorials/basic/","page":"Construct basic surveys","title":"Construct basic surveys","text":"append!(g1, gender_select(\"gender\", \"Please select your gender.\"))\nappend!(g1, numerical_input(\"age\", \"Please state your age in years.\", minimum=18, integer_only=true))\nappend!(g1, numerical_input(\"height\", \"Please state your height in centimeters.\", minimum=0, maximum=250, integer_only=true))\n\nmy_statistics_survey","category":"page"},{"location":"tutorials/basic/","page":"Construct basic surveys","title":"Construct basic surveys","text":"Again, we can export the survey to an .lss file using write.","category":"page"},{"location":"tutorials/basic/","page":"Construct basic surveys","title":"Construct basic surveys","text":"write(\"statistics_101.lss\", my_statistics_survey)","category":"page"},{"location":"tutorials/custom_question_types/#Creating-custom-question-types","page":"Creating custom question types","title":"Creating custom question types","text":"","category":"section"},{"location":"tutorials/custom_question_types/","page":"Creating custom question types","title":"Creating custom question types","text":"Sometimes it can be useful to create a custom question type if a certain type of question is used multiple times.","category":"page"},{"location":"tutorials/custom_question_types/","page":"Creating custom question types","title":"Creating custom question types","text":"As an example take a dropdown_list_question, which requires the participants to make a comment only if a certain response option is chosen.  A custom question type can simply be created by defining a custom function that provides the desired output.  In this case we want to return a Tuple of questions consisting of one dropdown_list_question for selecting the response option and one short_text_question that is dynamically shown or hidden dependent on the response given.","category":"page"},{"location":"tutorials/custom_question_types/","page":"Creating custom question types","title":"Creating custom question types","text":"note: Note\nDynamically showing question makes use of LimeSurveys relevance equations. Relevance equations for questions can be set using the relevance keyword argument.","category":"page"},{"location":"tutorials/custom_question_types/","page":"Creating custom question types","title":"Creating custom question types","text":"using CitrusBuilder\n\nfunction dropdown_with_comment(id, title, options, show_comment)\n    dropdown = dropdown_list_question(\"$(id)\", title, options)\n    comment = short_text_question(\"$(id)comment\", \"Please enter your comment here.\", relevance=\"{$(id)}==$(show_comment)\")\n    return dropdown, comment\nend","category":"page"},{"location":"tutorials/custom_question_types/","page":"Creating custom question types","title":"Creating custom question types","text":"We can now use this new question type to query for the survey participants favourite food and making them comment on their choice only if their favourite food item is pizza.","category":"page"},{"location":"tutorials/custom_question_types/","page":"Creating custom question types","title":"Creating custom question types","text":"food_options = response_scale([\n    response_option(\"p\", \"Pizza\"),\n    response_option(\"b\", \"Burger\"),\n    response_option(\"s\", \"Sushi\")\n])\n\nfood_survey = survey(100000, \"A survey on food\") do\n    question_group(1, \"\") do\n        dropdown_with_comment(\"favorite\", \"What's your favourite food?\", food_options, \"p\")\n    end\nend","category":"page"}]
}
